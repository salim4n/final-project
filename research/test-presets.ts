import { generateDailyMealsTool, generateGroceryListTool } from "../lib/tools/agent-tools.js";
import { presetA, presetB, presetC, presetD } from "./nutrition-presets.js";

// pnpm tsx research/test-presets.ts

// Donn√©es de test coh√©rentes
const testMealParams = {
    mealsAlreadyUsed: [
        "Salade C√©sar au poulet grill√©",
        "Saumon teriyaki avec riz basmati",
        "Omelette aux champignons"
    ],
    totalCalories: 2000,
    proteinRatio: 150,
    carbohydrateRatio: 200,
    fatRatio: 89,
    dietType: "none",
    intolerances: ["lactose"],
    includeBreakfast: true
};

const testGroceryParams = {
    mealPlan: [
        "Salade de quinoa aux l√©gumes grill√©s",
        "Saumon grill√© avec brocolis vapeur",
        "Omelette aux champignons et √©pinards",
        "Riz saut√© aux l√©gumes et tofu"
    ]
};

// Test rapide d'un preset avec les outils
async function quickTestPreset(preset: any, label: string) {
    console.log(`\nüß™ TEST ${label}`);
    console.log("=" .repeat(50));
    console.log("Preset:", JSON.stringify(preset, null, 2));

    try {
        // Test plan de repas
        console.log("\nüìã Test plan de repas...");
        const mealResult = await generateDailyMealsTool.invoke({
            ...testMealParams,
            preset
        });
        
        console.log("‚úÖ Plan de repas g√©n√©r√© avec succ√®s");
        console.log(`- Petit-d√©jeuner: ${mealResult.dailyPlan.breakfast?.name || 'Non inclus'}`);
        console.log(`- D√©jeuner: ${mealResult.dailyPlan.lunch.name}`);
        console.log(`- D√Æner: ${mealResult.dailyPlan.dinner.name}`);
        console.log(`- Collation: ${mealResult.dailyPlan.snack?.name || 'Non incluse'}`);

        // Test liste de courses
        console.log("\nüõí Test liste de courses...");
        const groceryResult = await generateGroceryListTool.invoke({
            ...testGroceryParams,
            preset
        });
        
        console.log("‚úÖ Liste de courses g√©n√©r√©e avec succ√®s");
        const categories = Object.keys(groceryResult.groceryList);
        console.log(`- Cat√©gories: ${categories.length} (${categories.join(', ')})`);
        
        // Compter le total d'articles
        const totalItems = categories.reduce((sum, cat) => {
            return sum + (groceryResult.groceryList as any)[cat].length;
        }, 0);
        console.log(`- Total articles: ${totalItems}`);

        return { success: true, mealResult, groceryResult };

    } catch (error) {
        console.log(`‚ùå Erreur avec ${label}:`, error);
        return { success: false, error };
    }
}

// Test de tous les presets
async function testAllPresets() {
    console.log("üçΩÔ∏è  TEST RAPIDE DES PRESETS NUTRITION üçΩÔ∏è");
    console.log("=".repeat(60));

    const presets = [
        { preset: presetA, label: "A (Cr√©ativit√© contr√¥l√©e)" },
        { preset: presetB, label: "B (Pr√©cision technique)" },
        { preset: presetC, label: "C (Diversit√© maximale)" },
        { preset: presetD, label: "D (Praticit√© optimis√©e)" }
    ];

    const results = [];

    for (const { preset, label } of presets) {
        const result = await quickTestPreset(preset, label);
        results.push({ label, ...result });
        
        // Pause entre les tests pour √©viter la surcharge
        await new Promise(resolve => setTimeout(resolve, 1000));
    }

    // R√©sum√© final
    console.log("\nüìä R√âSUM√â DES TESTS");
    console.log("=".repeat(30));
    
    const successful = results.filter(r => r.success);
    const failed = results.filter(r => !r.success);

    console.log(`‚úÖ Presets r√©ussis: ${successful.length}/${results.length}`);
    successful.forEach(r => console.log(`  - ${r.label}`));

    if (failed.length > 0) {
        console.log(`‚ùå Presets √©chou√©s: ${failed.length}/${results.length}`);
        failed.forEach(r => console.log(`  - ${r.label}: ${r.error}`));
    }

    console.log("\nüí° RECOMMANDATIONS:");
    console.log("- Preset A: Bon √©quilibre cr√©ativit√©/pr√©cision pour usage g√©n√©ral");
    console.log("- Preset B: Id√©al pour applications n√©cessitant une pr√©cision maximale");
    console.log("- Preset C: Parfait pour maximiser la vari√©t√© culinaire");
    console.log("- Preset D: Optimal pour des recettes simples et accessibles");
}

// Ex√©cution
testAllPresets().catch(console.error);
