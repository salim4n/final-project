import { generateDailyMealsTool, generateGroceryListTool } from "../lib/tools/agent-tools.js";
import { OPTIMAL_PRESET } from "../lib/config/presets.js";
import z from "zod";

// pnpm tsx examples/nutrition-app-example.ts

/**
 * Exemple d'utilisation des outils de nutrition avec le preset optimal
 * 
 * Ce fichier montre comment utiliser les outils dans une vraie application
 */

// Exemple de profil utilisateur
const UserProfileSchema = z.object({
    name: z.string(),
    totalCalories: z.number(),
    proteinRatio: z.number(),
    carbohydrateRatio: z.number(),
    fatRatio: z.number(),
    dietType: z.string(),
    intolerances: z.array(z.string()),
    includeBreakfast: z.boolean(),
    mealsHistory: z.array(z.string())
});
type UserProfile = z.infer<typeof UserProfileSchema>;

// Profil exemple
const exampleUser: UserProfile = {
    name: "Marie",
    totalCalories: 1800,
    proteinRatio: 135,
    carbohydrateRatio: 180,
    fatRatio: 80,
    dietType: "vegetarian",
    intolerances: ["lactose", "gluten"],
    includeBreakfast: true,
    mealsHistory: [
        "Salade de lentilles aux l√©gumes",
        "Tofu saut√© aux l√©gumes asiatiques",
        "Quinoa bowl aux l√©gumes grill√©s"
    ]
};

/**
 * G√©n√®re un plan de repas personnalis√© pour un utilisateur
 */
async function generatePersonalizedMealPlan(user: UserProfile) {
    console.log(`üçΩÔ∏è G√©n√©ration du plan de repas pour ${user.name}`);
    console.log(`üìä Objectifs: ${user.totalCalories} kcal | ${user.proteinRatio}g prot√©ines | ${user.carbohydrateRatio}g glucides | ${user.fatRatio}g lipides`);
    console.log(`ü•ó R√©gime: ${user.dietType} | Intol√©rances: ${user.intolerances.join(', ')}`);

    try {
        const mealPlan = await generateDailyMealsTool.invoke({
            mealsAlreadyUsed: user.mealsHistory,
            totalCalories: user.totalCalories,
            proteinRatio: user.proteinRatio,
            carbohydrateRatio: user.carbohydrateRatio,
            fatRatio: user.fatRatio,
            dietType: user.dietType,
            intolerances: user.intolerances,
            includeBreakfast: user.includeBreakfast,
            preset: OPTIMAL_PRESET
        });

        console.log("\n‚úÖ Plan de repas g√©n√©r√© !");
        
        // Affichage format√© du plan
        if (mealPlan.dailyPlan.breakfast) {
            console.log(`\nüåÖ Petit-d√©jeuner: ${mealPlan.dailyPlan.breakfast.name}`);
            console.log(`   Calories: ${mealPlan.dailyPlan.breakfast.calories} kcal`);
        }
        
        console.log(`\nüåû D√©jeuner: ${mealPlan.dailyPlan.lunch.name}`);
        console.log(`   Calories: ${mealPlan.dailyPlan.lunch.calories} kcal`);
        
        console.log(`\nüåô D√Æner: ${mealPlan.dailyPlan.dinner.name}`);
        console.log(`   Calories: ${mealPlan.dailyPlan.dinner.calories} kcal`);
        
        if (mealPlan.dailyPlan.snack) {
            console.log(`\nüçé Collation: ${mealPlan.dailyPlan.snack.name}`);
            console.log(`   Calories: ${mealPlan.dailyPlan.snack.calories} kcal`);
        }

        return mealPlan;

    } catch (error) {
        console.error("‚ùå Erreur lors de la g√©n√©ration du plan de repas:", error);
        throw error;
    }
}

/**
 * G√©n√®re une liste de courses bas√©e sur un plan de repas
 */
async function generateShoppingList(mealNames: string[]) {
    console.log("\nüõí G√©n√©ration de la liste de courses...");
    console.log(`üìù Bas√©e sur: ${mealNames.join(', ')}`);

    try {
        const groceryList = await generateGroceryListTool.invoke({
            mealPlan: mealNames,
            preset: OPTIMAL_PRESET
        });

        console.log("\n‚úÖ Liste de courses g√©n√©r√©e !");
        
        // Affichage format√© de la liste
        const categories = Object.entries(groceryList.groceryList);
        
        categories.forEach(([categoryKey, items]) => {
            const categoryNames: { [key: string]: string } = {
                fruitsEtLegumes: "ü•¨ Fruits et L√©gumes",
                viandesEtPoissons: "ü•© Viandes et Poissons",
                produitsLaitiers: "ü•õ Produits Laitiers",
                feculentsEtCereales: "üåæ F√©culents et C√©r√©ales",
                epicerie: "üè™ √âpicerie",
                condimentsEtEpices: "üßÇ Condiments et √âpices"
            };
            
            if (items.length > 0) {
                console.log(`\n${categoryNames[categoryKey] || categoryKey}:`);
                items.forEach(item => {
                    console.log(`  - ${item.name}: ${item.quantity} ${item.unit}`);
                });
            }
        });

        return groceryList;

    } catch (error) {
        console.error("‚ùå Erreur lors de la g√©n√©ration de la liste de courses:", error);
        throw error;
    }
}

/**
 * Workflow complet : Plan de repas + Liste de courses
 */
async function completeNutritionWorkflow(user: UserProfile) {
    console.log("üöÄ WORKFLOW COMPLET DE NUTRITION");
    console.log("=" .repeat(50));

    try {
        // 1. G√©n√©rer le plan de repas
        const mealPlan = await generatePersonalizedMealPlan(user);
        
        // 2. Extraire les noms des repas
        const mealNames = [
            mealPlan.dailyPlan.breakfast?.name,
            mealPlan.dailyPlan.lunch.name,
            mealPlan.dailyPlan.dinner.name,
            mealPlan.dailyPlan.snack?.name
        ].filter(Boolean) as string[];
        
        // 3. G√©n√©rer la liste de courses
        const groceryList = await generateShoppingList(mealNames);
        
        console.log("\nüéâ Workflow termin√© avec succ√®s !");
        console.log(`‚úÖ Plan de repas personnalis√© pour ${user.name}`);
        console.log(`‚úÖ Liste de courses optimis√©e`);
        console.log(`‚úÖ Respect des contraintes alimentaires`);
        
        return { mealPlan, groceryList };

    } catch (error) {
        console.error("‚ùå Erreur dans le workflow:", error);
        throw error;
    }
}

// Ex√©cution de l'exemple
if (import.meta.url === `file://${process.argv[1]}`) {
    completeNutritionWorkflow(exampleUser)
        .then(() => console.log("\n‚ú® Exemple termin√© !"))
        .catch(console.error);
}

export { generatePersonalizedMealPlan, generateShoppingList, completeNutritionWorkflow };
