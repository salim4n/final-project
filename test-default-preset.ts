// pnpm tsx test-default-preset.ts

import { generateDailyMealsTool, generateGroceryListTool } from "./lib/tools/agent-tools.js";

async function testDefaultPreset() {
    console.log("üéØ TEST DU PRESET OPTIMAL PAR D√âFAUT");
    console.log("=" .repeat(50));
    console.log("‚úÖ Les outils utilisent maintenant le preset optimal automatiquement !");
    console.log("üìä Preset optimal : temperature: 0.6, topP: 0.6, frequencyPenalty: 0.2, presencePenalty: 0.05");

    try {
        // Test plan de repas SANS sp√©cifier de preset
        console.log("\nüìã Test g√©n√©ration plan de repas (sans preset sp√©cifi√©)...");
        const mealResult = await generateDailyMealsTool.invoke({
            mealsAlreadyUsed: ["Salade C√©sar", "Saumon grill√©"],
            totalCalories: 1800,
            proteinRatio: 135,
            carbohydrateRatio: 180,
            fatRatio: 80,
            dietType: "none",
            intolerances: ["lactose"],
            includeBreakfast: true
            // ‚ö†Ô∏è AUCUN PRESET SP√âCIFI√â - utilise OPTIMAL_PRESET par d√©faut
        });
        
        console.log("‚úÖ Plan de repas g√©n√©r√© avec le preset optimal par d√©faut !");
        console.log(`- Petit-d√©jeuner: ${mealResult.dailyPlan.breakfast?.name || 'Non inclus'}`);
        console.log(`- D√©jeuner: ${mealResult.dailyPlan.lunch.name}`);
        console.log(`- D√Æner: ${mealResult.dailyPlan.dinner.name}`);

        // Test liste de courses SANS sp√©cifier de preset
        console.log("\nüõí Test g√©n√©ration liste de courses (sans preset sp√©cifi√©)...");
        const groceryResult = await generateGroceryListTool.invoke({
            mealPlan: [
                "Salade de quinoa aux l√©gumes",
                "Saumon grill√© avec brocolis",
                "Omelette aux champignons"
            ]
            // ‚ö†Ô∏è AUCUN PRESET SP√âCIFI√â - utilise OPTIMAL_PRESET par d√©faut
        });
        
        console.log("‚úÖ Liste de courses g√©n√©r√©e avec le preset optimal par d√©faut !");
        const totalItems = Object.values(groceryResult.groceryList).reduce((sum, category) => sum + category.length, 0);
        console.log(`- Total articles: ${totalItems}`);
        console.log(`- Cat√©gories: ${Object.keys(groceryResult.groceryList).length}`);

        console.log("\nüéâ SUCC√àS COMPLET !");
        console.log("‚úÖ Les outils utilisent automatiquement le preset optimal");
        console.log("‚úÖ Plus besoin de sp√©cifier le preset √† chaque appel");
        console.log("‚úÖ Simplification de l'API pour les d√©veloppeurs");
        console.log("‚úÖ Qualit√© garantie avec le preset test√© et valid√©");

    } catch (error) {
        console.error("‚ùå Erreur lors du test:", error);
    }
}

// Test avec preset personnalis√© (pour v√©rifier que c'est toujours possible)
async function testCustomPreset() {
    console.log("\nüîß TEST AVEC PRESET PERSONNALIS√â (optionnel)");
    console.log("=" .repeat(50));

    const customPreset = {
        temperature: 0.4,
        topP: 0.5,
        frequencyPenalty: 0.1,
        presencePenalty: 0.0
    };

    try {
        const mealResult = await generateDailyMealsTool.invoke({
            mealsAlreadyUsed: ["Pizza", "Burger"],
            totalCalories: 2200,
            proteinRatio: 165,
            carbohydrateRatio: 220,
            fatRatio: 98,
            dietType: "none",
            intolerances: [],
            includeBreakfast: true,
            preset: customPreset // ‚úÖ Preset personnalis√© sp√©cifi√©
        });

        console.log("‚úÖ Plan de repas g√©n√©r√© avec preset personnalis√© !");
        console.log(`- D√©jeuner: ${mealResult.dailyPlan.lunch.name}`);
        console.log("‚úÖ Flexibilit√© pr√©serv√©e pour les cas sp√©ciaux");

    } catch (error) {
        console.error("‚ùå Erreur avec preset personnalis√©:", error);
    }
}

async function runAllTests() {
    await testDefaultPreset();
    await testCustomPreset();
    
    console.log("\nüèÜ R√âSUM√â FINAL");
    console.log("=" .repeat(30));
    console.log("‚úÖ Preset optimal utilis√© par d√©faut");
    console.log("‚úÖ API simplifi√©e pour les d√©veloppeurs");
    console.log("‚úÖ Flexibilit√© pr√©serv√©e pour les cas avanc√©s");
    console.log("‚úÖ Qualit√© et performance optimis√©es");
}

runAllTests();
